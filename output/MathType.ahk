#SingleInstance force
#NoEnv
Hotstring("EndChars", "`t")

SendMode Input

global curFont := "italics"
global curElevation := "standard"
  
TypeAlphanumeral(variations, numBackspaces) {
  simplifiedVariations := {"standard": variations[curFont], "superscript": variations["superscript"], "subscript": variations["subscript"]}
  TypeString(simplifiedVariations, numBackspaces)
}

TypeString(variations, numBackspaces) {
  Send, {bs %numBackspaces%}
  toSend := variations[curElevation]
  SendRaw, %toSend%
}

ChangeFont(newFont) {
  curFont := newFont
}

ChangeElevation(newElevation) {
  curElevation := newElevation
}

Hotstring(":?B0COXZ:varepsilon", Func("TypeAlphanumeral").Bind({"italics":"𝜀","bold":"𝛆","roman":"ε"}, 10))
Hotstring(":?B0COXZ:vartheta", Func("TypeAlphanumeral").Bind({"italics":"𝜗","bold":"𝛝","roman":"ϑ"}, 8))
Hotstring(":?B0COXZ:root(3)", Func("TypeString").Bind({"standard":"∛"}, 7))
Hotstring(":?B0COXZ:root(4)", Func("TypeString").Bind({"standard":"∜"}, 7))
Hotstring(":?B0COXZ:diamond", Func("TypeString").Bind({"standard":"⋄"}, 7))
Hotstring(":?B0COXZ:epsilon", Func("TypeAlphanumeral").Bind({"italics":"𝜖","bold":"𝛜","roman":"ϵ"}, 7))
Hotstring(":?B0COXZ:upsilon", Func("TypeAlphanumeral").Bind({"italics":"𝜐","bold":"𝛖","roman":"υ"}, 7))
Hotstring(":?B0COXZ:iiiint", Func("TypeString").Bind({"standard":"⨌"}, 6))
Hotstring(":?B0COXZ:oiiint", Func("TypeString").Bind({"standard":"∰"}, 6))
Hotstring(":?B0COXZ:square", Func("TypeString").Bind({"standard":"□"}, 6))
Hotstring(":?B0COXZ:Delta=", Func("TypeString").Bind({"standard":"≜"}, 6))
Hotstring(":?B0COXZ:cancel", Func("TypeString").Bind({"standard":"̸"}, 6))
Hotstring(":?B0COXZ:Lambda", Func("TypeAlphanumeral").Bind({"italics":"𝛬","bold":"𝚲","roman":"Λ"}, 6))
Hotstring(":?B0COXZ:lambda", Func("TypeAlphanumeral").Bind({"italics":"𝜆","bold":"𝛌","roman":"λ"}, 6))
Hotstring(":?B0COXZ:varphi", Func("TypeAlphanumeral").Bind({"superscript":"ᵠ","subscript":"ᵩ","italics":"𝜑","bold":"𝛗","roman":"φ"}, 6))
Hotstring(":*?B0COX:arcsin", Func("TypeString").Bind({"standard":"arcsin"}, 5))
Hotstring(":*?B0COX:arccos", Func("TypeString").Bind({"standard":"arccos"}, 5))
Hotstring(":*?B0COX:arctan", Func("TypeString").Bind({"standard":"arctan"}, 5))
Hotstring(":*?B0COX:choose", Func("TypeString").Bind({"standard":"choose"}, 5))
Hotstring(":?COXZ:double", Func("ChangeFont").Bind("doubleStruck"))
Hotstring(":?COXZ:script", Func("ChangeFont").Bind("script"))
Hotstring(":?B0COXZ:iiint", Func("TypeString").Bind({"standard":"∭"}, 5))
Hotstring(":?B0COXZ:oiint", Func("TypeString").Bind({"standard":"∯"}, 5))
Hotstring(":?B0COXZ:cdots", Func("TypeString").Bind({"standard":"⋯"}, 5))
Hotstring(":?B0COXZ:vdots", Func("TypeString").Bind({"standard":"⋮"}, 5))
Hotstring(":?B0COXZ:ddots", Func("TypeString").Bind({"standard":"⋱"}, 5))
Hotstring(":?B0COXZ:frown", Func("TypeString").Bind({"standard":"⌢"}, 5))
Hotstring(":?B0COXZ:aleph", Func("TypeString").Bind({"standard":"ℵ"}, 5))
Hotstring(":?B0COXZ:tilde", Func("TypeString").Bind({"standard":"̃"}, 5))
Hotstring(":?B0COXZ:Gamma", Func("TypeAlphanumeral").Bind({"italics":"𝛤","bold":"𝚪","roman":"Γ"}, 5))
Hotstring(":?B0COXZ:Delta", Func("TypeAlphanumeral").Bind({"italics":"𝛥","bold":"𝚫","roman":"Δ"}, 5))
Hotstring(":?B0COXZ:Theta", Func("TypeAlphanumeral").Bind({"italics":"𝛩","bold":"𝚯","roman":"Θ"}, 5))
Hotstring(":?B0COXZ:Sigma", Func("TypeAlphanumeral").Bind({"italics":"𝛴","bold":"𝚺","roman":"Σ"}, 5))
Hotstring(":?B0COXZ:Omega", Func("TypeAlphanumeral").Bind({"italics":"𝛺","bold":"𝛀","roman":"Ω"}, 5))
Hotstring(":?B0COXZ:alpha", Func("TypeAlphanumeral").Bind({"italics":"𝛼","bold":"𝛂","roman":"α"}, 5))
Hotstring(":?B0COXZ:gamma", Func("TypeAlphanumeral").Bind({"superscript":"ᵞ","subscript":"ᵧ","italics":"𝛾","bold":"𝛄","roman":"γ"}, 5))
Hotstring(":?B0COXZ:delta", Func("TypeAlphanumeral").Bind({"superscript":"ᵟ","italics":"𝛿","bold":"𝛅","roman":"δ"}, 5))
Hotstring(":?B0COXZ:theta", Func("TypeAlphanumeral").Bind({"superscript":"ᶿ","italics":"𝜃","bold":"𝛉","roman":"θ"}, 5))
Hotstring(":?B0COXZ:kappa", Func("TypeAlphanumeral").Bind({"italics":"𝜅","bold":"𝛋","roman":"κ"}, 5))
Hotstring(":?B0COXZ:sigma", Func("TypeAlphanumeral").Bind({"italics":"𝜎","bold":"𝛔","roman":"σ"}, 5))
Hotstring(":?B0COXZ:omega", Func("TypeAlphanumeral").Bind({"italics":"𝜔","bold":"𝛚","roman":"ω"}, 5))
Hotstring(":?B0COXZ:|><|", Func("TypeString").Bind({"standard":"⋈"}, 4))
Hotstring(":?B0COXZ:sqrt", Func("TypeString").Bind({"standard":"√"}, 4))
Hotstring(":?B0COXZ:prod", Func("TypeString").Bind({"standard":"∏"}, 4))
Hotstring(":?B0COXZ:iint", Func("TypeString").Bind({"standard":"∬"}, 4))
Hotstring(":?B0COXZ:oint", Func("TypeString").Bind({"standard":"∮"}, 4))
Hotstring(":?B0COXZ:''''", Func("TypeString").Bind({"standard":"⁗"}, 4))
Hotstring(":?B0COXZ:quad", Func("TypeString").Bind({"standard":" ","superscript":" ","subscript":" "}, 4))
Hotstring(":?B0COXZ:1/10", Func("TypeString").Bind({"standard":"⅒"}, 4))
Hotstring(":?B0COXZ:prop", Func("TypeString").Bind({"standard":"∝"}, 4))
Hotstring(":?B0COXZ:sub=", Func("TypeString").Bind({"standard":"⊆"}, 4))
Hotstring(":?B0COXZ:sup=", Func("TypeString").Bind({"standard":"⊇"}, 4))
Hotstring(":?B0COXZ:lArr", Func("TypeString").Bind({"standard":"⇐"}, 4))
Hotstring(":?B0COXZ:uarr", Func("TypeString").Bind({"standard":"↑"}, 4))
Hotstring(":?B0COXZ:darr", Func("TypeString").Bind({"standard":"↓"}, 4))
Hotstring(":?B0COXZ:>->>", Func("TypeString").Bind({"standard":"⤖"}, 4))
Hotstring(":?B0COXZ:grad", Func("TypeString").Bind({"standard":"∇"}, 4))
Hotstring(":?B0COXZ:ddot", Func("TypeString").Bind({"standard":"̈"}, 4))
Hotstring(":?B0COXZ:beta", Func("TypeAlphanumeral").Bind({"superscript":"ᵝ","subscript":"ᵦ","italics":"𝛽","bold":"𝛃","roman":"β"}, 4))
Hotstring(":?B0COXZ:zeta", Func("TypeAlphanumeral").Bind({"italics":"𝜁","bold":"𝛇","roman":"ζ"}, 4))
Hotstring(":?B0COXZ:iota", Func("TypeAlphanumeral").Bind({"superscript":"ᶥ","subscript":"ᶥ","italics":"𝜄","bold":"𝛊","roman":"ι"}, 4))
Hotstring(":*?B0COX:sinh", Func("TypeString").Bind({"standard":"sinh"}, 3))
Hotstring(":*?B0COX:cosh", Func("TypeString").Bind({"standard":"cosh"}, 3))
Hotstring(":*?B0COX:tanh", Func("TypeString").Bind({"standard":"tanh"}, 3))
Hotstring(":*?B0COX:sech", Func("TypeString").Bind({"standard":"sech"}, 3))
Hotstring(":*?B0COX:csch", Func("TypeString").Bind({"standard":"csch"}, 3))
Hotstring(":*?B0COX:coth", Func("TypeString").Bind({"standard":"coth"}, 3))
Hotstring(":?COXZ:bold", Func("ChangeFont").Bind("bold"))
Hotstring(":?COXZ:mono", Func("ChangeFont").Bind("monospace"))
Hotstring(":?COXZ:frak", Func("ChangeFont").Bind("fraktur"))
Hotstring(":?COXZ:sans", Func("ChangeFont").Bind("sansSerif"))
Hotstring(":?COXZ:ital", Func("ChangeFont").Bind("italics"))
Hotstring(":?B0COXZ:***", Func("TypeString").Bind({"standard":"⋆"}, 3))
Hotstring(":?B0COXZ:|><", Func("TypeString").Bind({"standard":"⋉"}, 3))
Hotstring(":?B0COXZ:><|", Func("TypeString").Bind({"standard":"⋊"}, 3))
Hotstring(":?B0COXZ:sum", Func("TypeString").Bind({"standard":"∑"}, 3))
Hotstring(":?B0COXZ:int", Func("TypeString").Bind({"standard":"∫"}, 3))
Hotstring(":?B0COXZ:...", Func("TypeString").Bind({"standard":"…"}, 3))
Hotstring(":?B0COXZ:'''", Func("TypeString").Bind({"standard":"‴"}, 3))
Hotstring(":?B0COXZ:1/4", Func("TypeString").Bind({"standard":"¼"}, 3))
Hotstring(":?B0COXZ:1/2", Func("TypeString").Bind({"standard":"½"}, 3))
Hotstring(":?B0COXZ:3/4", Func("TypeString").Bind({"standard":"¾"}, 3))
Hotstring(":?B0COXZ:1/7", Func("TypeString").Bind({"standard":"⅐"}, 3))
Hotstring(":?B0COXZ:1/9", Func("TypeString").Bind({"standard":"⅑"}, 3))
Hotstring(":?B0COXZ:1/3", Func("TypeString").Bind({"standard":"⅓"}, 3))
Hotstring(":?B0COXZ:2/3", Func("TypeString").Bind({"standard":"⅔"}, 3))
Hotstring(":?B0COXZ:1/5", Func("TypeString").Bind({"standard":"⅕"}, 3))
Hotstring(":?B0COXZ:2/5", Func("TypeString").Bind({"standard":"⅖"}, 3))
Hotstring(":?B0COXZ:3/5", Func("TypeString").Bind({"standard":"⅗"}, 3))
Hotstring(":?B0COXZ:4/5", Func("TypeString").Bind({"standard":"⅘"}, 3))
Hotstring(":?B0COXZ:1/6", Func("TypeString").Bind({"standard":"⅙"}, 3))
Hotstring(":?B0COXZ:5/6", Func("TypeString").Bind({"standard":"⅚"}, 3))
Hotstring(":?B0COXZ:1/8", Func("TypeString").Bind({"standard":"⅛"}, 3))
Hotstring(":?B0COXZ:3/8", Func("TypeString").Bind({"standard":"⅜"}, 3))
Hotstring(":?B0COXZ:5/8", Func("TypeString").Bind({"standard":"⅝"}, 3))
Hotstring(":?B0COXZ:7/8", Func("TypeString").Bind({"standard":"⅞"}, 3))
Hotstring(":?B0COXZ:/_\", Func("TypeString").Bind({"standard":"△"}, 3))
Hotstring(":?B0COXZ:_|_", Func("TypeString").Bind({"standard":"⊥"}, 3))
Hotstring(":?B0COXZ:!<=", Func("TypeString").Bind({"standard":"≰"}, 3))
Hotstring(":?B0COXZ:<<<", Func("TypeString").Bind({"standard":"⋘"}, 3))
Hotstring(":?B0COXZ:!>=", Func("TypeString").Bind({"standard":"≱"}, 3))
Hotstring(":?B0COXZ:>>>", Func("TypeString").Bind({"standard":"⋙"}, 3))
Hotstring(":?B0COXZ:-<=", Func("TypeString").Bind({"standard":"≼"}, 3))
Hotstring(":?B0COXZ:>-=", Func("TypeString").Bind({"standard":"≽"}, 3))
Hotstring(":?B0COXZ:!in", Func("TypeString").Bind({"standard":"∉"}, 3))
Hotstring(":?B0COXZ:sub", Func("TypeString").Bind({"standard":"⊂"}, 3))
Hotstring(":?B0COXZ:sup", Func("TypeString").Bind({"standard":"⊃"}, 3))
Hotstring(":?B0COXZ:<=>", Func("TypeString").Bind({"standard":"⇔"}, 3))
Hotstring(":?B0COXZ:-->", Func("TypeString").Bind({"standard":"⟶"}, 3))
Hotstring(":?B0COXZ:>->", Func("TypeString").Bind({"standard":"↣"}, 3))
Hotstring(":?B0COXZ:->>", Func("TypeString").Bind({"standard":"↠"}, 3))
Hotstring(":?B0COXZ:|->", Func("TypeString").Bind({"standard":"↦"}, 3))
Hotstring(":?B0COXZ:<--", Func("TypeString").Bind({"standard":"⟵"}, 3))
Hotstring(":?B0COXZ:<->", Func("TypeString").Bind({"standard":"↔︎"}, 3))
Hotstring(":?B0COXZ:^^^", Func("TypeString").Bind({"standard":"⋀"}, 3))
Hotstring(":?B0COXZ:vvv", Func("TypeString").Bind({"standard":"⋁"}, 3))
Hotstring(":?B0COXZ:nnn", Func("TypeString").Bind({"standard":"⋂"}, 3))
Hotstring(":?B0COXZ:uuu", Func("TypeString").Bind({"standard":"⋃"}, 3))
Hotstring(":?B0COXZ:not", Func("TypeString").Bind({"standard":"¬"}, 3))
Hotstring(":?B0COXZ:del", Func("TypeString").Bind({"standard":"∂"}, 3))
Hotstring(":?B0COXZ:Del", Func("TypeString").Bind({"standard":"∆"}, 3))
Hotstring(":?B0COXZ:hat", Func("TypeString").Bind({"standard":"̂"}, 3))
Hotstring(":?B0COXZ:bar", Func("TypeString").Bind({"standard":"̅"}, 3))
Hotstring(":?B0COXZ:vec", Func("TypeString").Bind({"standard":"⃗"}, 3))
Hotstring(":?B0COXZ:dot", Func("TypeString").Bind({"standard":"̇"}, 3))
Hotstring(":?B0COXZ:Phi", Func("TypeAlphanumeral").Bind({"italics":"𝛷","bold":"𝚽","roman":"Φ"}, 3))
Hotstring(":?B0COXZ:Psi", Func("TypeAlphanumeral").Bind({"italics":"𝛹","bold":"𝚿","roman":"Ψ"}, 3))
Hotstring(":?B0COXZ:eta", Func("TypeAlphanumeral").Bind({"italics":"𝜂","bold":"𝛈","roman":"η"}, 3))
Hotstring(":?B0COXZ:rho", Func("TypeAlphanumeral").Bind({"italics":"𝜌","bold":"𝛒","roman":"ρ"}, 3))
Hotstring(":?B0COXZ:tau", Func("TypeAlphanumeral").Bind({"italics":"𝜏","bold":"𝛕","roman":"τ"}, 3))
Hotstring(":?B0COXZ:phi", Func("TypeAlphanumeral").Bind({"italics":"𝜙","bold":"𝛟","roman":"ϕ"}, 3))
Hotstring(":?B0COXZ:chi", Func("TypeAlphanumeral").Bind({"superscript":"ᵡ","subscript":"ᵪ","italics":"𝜒","bold":"𝛘","roman":"χ"}, 3))
Hotstring(":?B0COXZ:psi", Func("TypeAlphanumeral").Bind({"italics":"𝜓","bold":"𝛙","roman":"ψ"}, 3))
Hotstring(":*?B0COX:sin", Func("TypeString").Bind({"standard":"sin"}, 2))
Hotstring(":*?B0COX:cos", Func("TypeString").Bind({"standard":"cos"}, 2))
Hotstring(":*?B0COX:tan", Func("TypeString").Bind({"standard":"tan"}, 2))
Hotstring(":*?B0COX:sec", Func("TypeString").Bind({"standard":"sec"}, 2))
Hotstring(":*?B0COX:csc", Func("TypeString").Bind({"standard":"csc"}, 2))
Hotstring(":*?B0COX:cot", Func("TypeString").Bind({"standard":"cot"}, 2))
Hotstring(":*?B0COX:exp", Func("TypeString").Bind({"standard":"exp"}, 2))
Hotstring(":*?B0COX:log", Func("TypeString").Bind({"standard":"log"}, 2))
Hotstring(":*?B0COX:mod", Func("TypeString").Bind({"standard":"mod"}, 2))
Hotstring(":*?B0COX:lim", Func("TypeString").Bind({"standard":"lim"}, 2))
Hotstring(":*?B0COX:and", Func("TypeString").Bind({"standard":"and"}, 2))
Hotstring(":?COXZ:rom", Func("ChangeFont").Bind("roman"))
Hotstring(":?B0COXZ:**", Func("TypeString").Bind({"standard":"∗"}, 2))
Hotstring(":?B0COXZ://", Func("TypeString").Bind({"standard":"⁄"}, 2))
Hotstring(":?B0COXZ:xx", Func("TypeString").Bind({"standard":"×"}, 2))
Hotstring(":?B0COXZ:-:", Func("TypeString").Bind({"standard":"÷"}, 2))
Hotstring(":?B0COXZ:+-", Func("TypeString").Bind({"standard":"±"}, 2))
Hotstring(":?B0COXZ:-+", Func("TypeString").Bind({"standard":"∓"}, 2))
Hotstring(":?B0COXZ:o+", Func("TypeString").Bind({"standard":"⊕"}, 2))
Hotstring(":?B0COXZ:ox", Func("TypeString").Bind({"standard":"⊗"}, 2))
Hotstring(":?B0COXZ:o.", Func("TypeString").Bind({"standard":"⊙"}, 2))
Hotstring(":?B0COXZ::.", Func("TypeString").Bind({"standard":"∴"}, 2))
Hotstring(":?B0COXZ::'", Func("TypeString").Bind({"standard":"∵"}, 2))
Hotstring(":?B0COXZ:''", Func("TypeString").Bind({"standard":"″"}, 2))
Hotstring(":*?B0COX:  ", Func("TypeString").Bind({"standard":" ","superscript":" ","subscript":" "}, 1))
Hotstring(":?B0COXZ:|_", Func("TypeString").Bind({"standard":"⌊"}, 2))
Hotstring(":?B0COXZ:_|", Func("TypeString").Bind({"standard":"⌋"}, 2))
Hotstring(":?B0COXZ:|~", Func("TypeString").Bind({"standard":"⌈"}, 2))
Hotstring(":?B0COXZ:~|", Func("TypeString").Bind({"standard":"⌉"}, 2))
Hotstring(":?B0COXZ:(:", Func("TypeString").Bind({"standard":"⟨"}, 2))
Hotstring(":?B0COXZ::)", Func("TypeString").Bind({"standard":"⟩"}, 2))
Hotstring(":?B0COXZ:||", Func("TypeString").Bind({"standard":"‖"}, 2))
Hotstring(":?B0COXZ:/_", Func("TypeString").Bind({"standard":"∠"}, 2))
Hotstring(":?B0COXZ:CC", Func("TypeString").Bind({"standard":"ℂ"}, 2))
Hotstring(":?B0COXZ:NN", Func("TypeString").Bind({"standard":"ℕ"}, 2))
Hotstring(":?B0COXZ:QQ", Func("TypeString").Bind({"standard":"ℚ"}, 2))
Hotstring(":?B0COXZ:RR", Func("TypeString").Bind({"standard":"ℝ"}, 2))
Hotstring(":?B0COXZ:ZZ", Func("TypeString").Bind({"standard":"ℤ"}, 2))
Hotstring(":?B0COXZ:AA", Func("TypeString").Bind({"standard":"∀"}, 2))
Hotstring(":?B0COXZ:EE", Func("TypeString").Bind({"standard":"∃"}, 2))
Hotstring(":?B0COXZ:TT", Func("TypeString").Bind({"standard":"⊤"}, 2))
Hotstring(":?B0COXZ:|-", Func("TypeString").Bind({"standard":"⊢"}, 2))
Hotstring(":?B0COXZ:|=", Func("TypeString").Bind({"standard":"⊨"}, 2))
Hotstring(":?B0COXZ::=", Func("TypeString").Bind({"standard":"≔"}, 2))
Hotstring(":?B0COXZ:!=", Func("TypeString").Bind({"standard":"≠"}, 2))
Hotstring(":?B0COXZ:?=", Func("TypeString").Bind({"standard":"≟"}, 2))
Hotstring(":?B0COXZ:-=", Func("TypeString").Bind({"standard":"≡"}, 2))
Hotstring(":?B0COXZ:~=", Func("TypeString").Bind({"standard":"≅"}, 2))
Hotstring(":?B0COXZ:~~", Func("TypeString").Bind({"standard":"≈"}, 2))
Hotstring(":?B0COXZ:<=", Func("TypeString").Bind({"standard":"≤"}, 2))
Hotstring(":?B0COXZ:?<", Func("TypeString").Bind({"standard":"⩻"}, 2))
Hotstring(":?B0COXZ:!<", Func("TypeString").Bind({"standard":"≮"}, 2))
Hotstring(":?B0COXZ:<<", Func("TypeString").Bind({"standard":"≪"}, 2))
Hotstring(":?B0COXZ:>=", Func("TypeString").Bind({"standard":"≥"}, 2))
Hotstring(":?B0COXZ:?>", Func("TypeString").Bind({"standard":"⩼"}, 2))
Hotstring(":?B0COXZ:!>", Func("TypeString").Bind({"standard":"≯"}, 2))
Hotstring(":?B0COXZ:>>", Func("TypeString").Bind({"standard":"≫"}, 2))
Hotstring(":?B0COXZ:-<", Func("TypeString").Bind({"standard":"≺"}, 2))
Hotstring(":?B0COXZ:>-", Func("TypeString").Bind({"standard":"≻"}, 2))
Hotstring(":?B0COXZ:in", Func("TypeString").Bind({"standard":"∈"}, 2))
Hotstring(":?B0COXZ:=>", Func("TypeString").Bind({"standard":"⇒"}, 2))
Hotstring(":?B0COXZ:->", Func("TypeString").Bind({"standard":"→"}, 2))
Hotstring(":?B0COXZ:<-", Func("TypeString").Bind({"standard":"←"}, 2))
Hotstring(":?B0COXZ:^^", Func("TypeString").Bind({"standard":"∧"}, 2))
Hotstring(":?B0COXZ:vv", Func("TypeString").Bind({"standard":"∨"}, 2))
Hotstring(":?B0COXZ:nn", Func("TypeString").Bind({"standard":"∩"}, 2))
Hotstring(":?B0COXZ:uu", Func("TypeString").Bind({"standard":"∪"}, 2))
Hotstring(":?B0COXZ:O/", Func("TypeString").Bind({"standard":"∅"}, 2))
Hotstring(":?B0COXZ:oo", Func("TypeString").Bind({"standard":"∞"}, 2))
Hotstring(":?B0COXZ:ul", Func("TypeString").Bind({"standard":"̲"}, 2))
Hotstring(":?B0COXZ:Xi", Func("TypeAlphanumeral").Bind({"italics":"𝛯","bold":"𝚵","roman":"Ξ"}, 2))
Hotstring(":?B0COXZ:Pi", Func("TypeAlphanumeral").Bind({"italics":"𝛱","bold":"𝚷","roman":"Π"}, 2))
Hotstring(":?B0COXZ:mu", Func("TypeAlphanumeral").Bind({"italics":"𝜇","bold":"𝛍","roman":"μ"}, 2))
Hotstring(":?B0COXZ:nu", Func("TypeAlphanumeral").Bind({"italics":"𝜈","bold":"𝛎","roman":"ν"}, 2))
Hotstring(":?B0COXZ:xi", Func("TypeAlphanumeral").Bind({"italics":"𝜉","bold":"𝛏","roman":"ξ"}, 2))
Hotstring(":?B0COXZ:pi", Func("TypeAlphanumeral").Bind({"italics":"𝜋","bold":"𝛑","roman":"π"}, 2))
Hotstring(":*?B0COX:ln", Func("TypeString").Bind({"standard":"ln"}, 1))
Hotstring(":*?B0COX:if", Func("TypeString").Bind({"standard":"if"}, 1))
Hotstring(":*?B0COX:or", Func("TypeString").Bind({"standard":"or"}, 1))
Hotstring(":*?B0COX:+", Func("TypeString").Bind({"standard":"+","superscript":"⁺","subscript":"₊"}, 0))
Hotstring(":*?B0COX:-", Func("TypeString").Bind({"standard":"−","superscript":"⁻","subscript":"₋"}, 0))
Hotstring(":*?B0COX:*", Func("TypeString").Bind({"standard":"⋅"}, 0))
Hotstring(":*?B0COX:/", Func("TypeString").Bind({"standard":"∕"}, 0))
Hotstring(":*?B0COX:\", Func("TypeString").Bind({"standard":"∖"}, 0))
Hotstring(":*?B0COX::", Func("TypeString").Bind({"standard":"∶"}, 0))
Hotstring(":*?B0COX:!", Func("TypeString").Bind({"standard":"!"}, 0))
Hotstring(":*?B0COX:@", Func("TypeString").Bind({"standard":"∘"}, 0))
Hotstring(":*?B0COX:'", Func("TypeString").Bind({"standard":"′"}, 0))
Hotstring(":*?B0COX: ", Func("TypeString").Bind({"standard":" ","superscript":" ","subscript":" "}, 0))
Hotstring(":*?B0COX:(", Func("TypeString").Bind({"standard":"(","superscript":"⁽","subscript":"₍"}, 0))
Hotstring(":*?B0COX:)", Func("TypeString").Bind({"standard":")","superscript":"⁾","subscript":"₎"}, 0))
Hotstring(":*?B0COX:[", Func("TypeString").Bind({"standard":"["}, 0))
Hotstring(":*?B0COX:]", Func("TypeString").Bind({"standard":"]"}, 0))
Hotstring(":*?B0COX:{", Func("TypeString").Bind({"standard":"{"}, 0))
Hotstring(":*?B0COX:}", Func("TypeString").Bind({"standard":"}"}, 0))
Hotstring(":*?B0COX:=", Func("TypeString").Bind({"standard":"=","superscript":"⁼","subscript":"₌"}, 0))
Hotstring(":*?B0COX:~", Func("TypeString").Bind({"standard":"∼"}, 0))
Hotstring(":*?B0COX:<", Func("TypeString").Bind({"standard":"<"}, 0))
Hotstring(":*?B0COX:>", Func("TypeString").Bind({"standard":">"}, 0))
Hotstring(":*?B0COX:0", Func("TypeAlphanumeral").Bind({"superscript":"⁰","subscript":"₀","italics":"0","bold":"𝟎","doubleStruck":"𝟘","monospace":"𝟶","sansSerif":"𝟢","roman":"0"}, 0))
Hotstring(":*?B0COX:1", Func("TypeAlphanumeral").Bind({"superscript":"¹","subscript":"₁","italics":"1","bold":"𝟏","doubleStruck":"𝟙","monospace":"𝟷","sansSerif":"𝟣","roman":"1"}, 0))
Hotstring(":*?B0COX:2", Func("TypeAlphanumeral").Bind({"superscript":"²","subscript":"₂","italics":"2","bold":"𝟐","doubleStruck":"𝟚","monospace":"𝟸","sansSerif":"𝟤","roman":"2"}, 0))
Hotstring(":*?B0COX:3", Func("TypeAlphanumeral").Bind({"superscript":"³","subscript":"₃","italics":"3","bold":"𝟑","doubleStruck":"𝟛","monospace":"𝟹","sansSerif":"𝟥","roman":"3"}, 0))
Hotstring(":*?B0COX:4", Func("TypeAlphanumeral").Bind({"superscript":"⁴","subscript":"₄","italics":"4","bold":"𝟒","doubleStruck":"𝟜","monospace":"𝟺","sansSerif":"𝟦","roman":"4"}, 0))
Hotstring(":*?B0COX:5", Func("TypeAlphanumeral").Bind({"superscript":"⁵","subscript":"₅","italics":"5","bold":"𝟓","doubleStruck":"𝟝","monospace":"𝟻","sansSerif":"𝟧","roman":"5"}, 0))
Hotstring(":*?B0COX:6", Func("TypeAlphanumeral").Bind({"superscript":"⁶","subscript":"₆","italics":"6","bold":"𝟔","doubleStruck":"𝟞","monospace":"𝟼","sansSerif":"𝟨","roman":"6"}, 0))
Hotstring(":*?B0COX:7", Func("TypeAlphanumeral").Bind({"superscript":"⁷","subscript":"₇","italics":"7","bold":"𝟕","doubleStruck":"𝟟","monospace":"𝟽","sansSerif":"𝟩","roman":"7"}, 0))
Hotstring(":*?B0COX:8", Func("TypeAlphanumeral").Bind({"superscript":"⁸","subscript":"₈","italics":"8","bold":"𝟖","doubleStruck":"𝟠","monospace":"𝟾","sansSerif":"𝟪","roman":"8"}, 0))
Hotstring(":*?B0COX:9", Func("TypeAlphanumeral").Bind({"superscript":"⁹","subscript":"₉","italics":"9","bold":"𝟗","doubleStruck":"𝟡","monospace":"𝟿","sansSerif":"𝟫","roman":"9"}, 0))
Hotstring(":*?B0COX:a", Func("TypeAlphanumeral").Bind({"superscript":"ᵃ","italics":"𝑎","bold":"𝗮","doubleStruck":"𝕒","script":"𝒶","monospace":"𝚊","fraktur":"𝔞","sansSerif":"𝖺","roman":"a"}, 0))
Hotstring(":*?B0COX:b", Func("TypeAlphanumeral").Bind({"superscript":"ᵇ","italics":"𝑏","bold":"𝗯","doubleStruck":"𝕓","script":"𝒷","monospace":"𝚋","fraktur":"𝔟","sansSerif":"𝖻","roman":"b"}, 0))
Hotstring(":*?B0COX:c", Func("TypeAlphanumeral").Bind({"superscript":"ᶜ","italics":"𝑐","bold":"𝗰","doubleStruck":"𝕔","script":"𝒸","monospace":"𝚌","fraktur":"𝔠","sansSerif":"𝖼","roman":"c"}, 0))
Hotstring(":*?B0COX:d", Func("TypeAlphanumeral").Bind({"superscript":"ᵈ","italics":"𝑑","bold":"𝗱","doubleStruck":"𝕕","script":"𝒹","monospace":"𝚍","fraktur":"𝔡","sansSerif":"𝖽","roman":"d"}, 0))
Hotstring(":*?B0COX:e", Func("TypeAlphanumeral").Bind({"superscript":"ᵉ","italics":"𝑒","bold":"𝗲","doubleStruck":"𝕖","script":"ℯ","monospace":"𝚎","fraktur":"𝔢","sansSerif":"𝖾","roman":"e"}, 0))
Hotstring(":*?B0COX:f", Func("TypeAlphanumeral").Bind({"superscript":"ᶠ","italics":"𝑓","bold":"𝗳","doubleStruck":"𝕗","script":"𝒻","monospace":"𝚏","fraktur":"𝔣","sansSerif":"𝖿","roman":"f"}, 0))
Hotstring(":*?B0COX:g", Func("TypeAlphanumeral").Bind({"superscript":"ᵍ","italics":"𝑔","bold":"𝗴","doubleStruck":"𝕘","script":"ℊ","monospace":"𝚐","fraktur":"𝔤","sansSerif":"𝗀","roman":"g"}, 0))
Hotstring(":*?B0COX:h", Func("TypeAlphanumeral").Bind({"superscript":"ʰ","italics":"ℎ","bold":"𝗵","doubleStruck":"𝕙","script":"𝒽","monospace":"𝚑","fraktur":"𝔥","sansSerif":"𝗁","roman":"h"}, 0))
Hotstring(":*?B0COX:i", Func("TypeAlphanumeral").Bind({"superscript":"ⁱ","italics":"𝑖","bold":"𝗶","doubleStruck":"𝕚","script":"𝒾","monospace":"𝚒","fraktur":"𝔦","sansSerif":"𝗂","roman":"i"}, 0))
Hotstring(":*?B0COX:j", Func("TypeAlphanumeral").Bind({"superscript":"ʲ","italics":"𝑗","bold":"𝗷","doubleStruck":"𝕛","script":"𝒿","monospace":"𝚓","fraktur":"𝔧","sansSerif":"𝗃","roman":"j"}, 0))
Hotstring(":*?B0COX:k", Func("TypeAlphanumeral").Bind({"superscript":"ᵏ","italics":"𝑘","bold":"𝗸","doubleStruck":"𝕜","script":"𝓀","monospace":"𝚔","fraktur":"𝔨","sansSerif":"𝗄","roman":"k"}, 0))
Hotstring(":*?B0COX:l", Func("TypeAlphanumeral").Bind({"superscript":"ˡ","italics":"𝑙","bold":"𝗹","doubleStruck":"𝕝","script":"𝓁","monospace":"𝚕","fraktur":"𝔩","sansSerif":"𝗅","roman":"l"}, 0))
Hotstring(":*?B0COX:m", Func("TypeAlphanumeral").Bind({"superscript":"ᵐ","italics":"𝑚","bold":"𝗺","doubleStruck":"𝕞","script":"𝓂","monospace":"𝚖","fraktur":"𝔪","sansSerif":"𝗆","roman":"m"}, 0))
Hotstring(":*?B0COX:n", Func("TypeAlphanumeral").Bind({"superscript":"ⁿ","italics":"𝑛","bold":"𝗻","doubleStruck":"𝕟","script":"𝓃","monospace":"𝚗","fraktur":"𝔫","sansSerif":"𝗇","roman":"n"}, 0))
Hotstring(":*?B0COX:o", Func("TypeAlphanumeral").Bind({"superscript":"ᵒ","italics":"𝑜","bold":"𝗼","doubleStruck":"𝕠","script":"ℴ","monospace":"𝚘","fraktur":"𝔬","sansSerif":"𝗈","roman":"o"}, 0))
Hotstring(":*?B0COX:p", Func("TypeAlphanumeral").Bind({"superscript":"ᵖ","italics":"𝑝","bold":"𝗽","doubleStruck":"𝕡","script":"𝓅","monospace":"𝚙","fraktur":"𝔭","sansSerif":"𝗉","roman":"p"}, 0))
Hotstring(":*?B0COX:q", Func("TypeAlphanumeral").Bind({"italics":"𝑞","bold":"𝗾","doubleStruck":"𝕢","script":"𝓆","monospace":"𝚚","fraktur":"𝔮","sansSerif":"𝗊","roman":"q"}, 0))
Hotstring(":*?B0COX:r", Func("TypeAlphanumeral").Bind({"superscript":"ʳ","italics":"𝑟","bold":"𝗿","doubleStruck":"𝕣","script":"𝓇","monospace":"𝚛","fraktur":"𝔯","sansSerif":"𝗋","roman":"r"}, 0))
Hotstring(":*?B0COX:s", Func("TypeAlphanumeral").Bind({"superscript":"ˢ","italics":"𝑠","bold":"𝘀","doubleStruck":"𝕤","script":"𝓈","monospace":"𝚜","fraktur":"𝔰","sansSerif":"𝗌","roman":"s"}, 0))
Hotstring(":*?B0COX:t", Func("TypeAlphanumeral").Bind({"superscript":"ᵗ","italics":"𝑡","bold":"𝘁","doubleStruck":"𝕥","script":"𝓉","monospace":"𝚝","fraktur":"𝔱","sansSerif":"𝗍","roman":"t"}, 0))
Hotstring(":*?B0COX:u", Func("TypeAlphanumeral").Bind({"superscript":"ᵘ","italics":"𝑢","bold":"𝘂","doubleStruck":"𝕦","script":"𝓊","monospace":"𝚞","fraktur":"𝔲","sansSerif":"𝗎","roman":"u"}, 0))
Hotstring(":*?B0COX:v", Func("TypeAlphanumeral").Bind({"superscript":"ᵛ","italics":"𝑣","bold":"𝘃","doubleStruck":"𝕧","script":"𝓋","monospace":"𝚟","fraktur":"𝔳","sansSerif":"𝗏","roman":"v"}, 0))
Hotstring(":*?B0COX:w", Func("TypeAlphanumeral").Bind({"superscript":"ʷ","italics":"𝑤","bold":"𝘄","doubleStruck":"𝕨","script":"𝓌","monospace":"𝚠","fraktur":"𝔴","sansSerif":"𝗐","roman":"w"}, 0))
Hotstring(":*?B0COX:x", Func("TypeAlphanumeral").Bind({"superscript":"ˣ","italics":"𝑥","bold":"𝘅","doubleStruck":"𝕩","script":"𝓍","monospace":"𝚡","fraktur":"𝔵","sansSerif":"𝗑","roman":"x"}, 0))
Hotstring(":*?B0COX:y", Func("TypeAlphanumeral").Bind({"superscript":"ʸ","italics":"𝑦","bold":"𝘆","doubleStruck":"𝕪","script":"𝓎","monospace":"𝚢","fraktur":"𝔶","sansSerif":"𝗒","roman":"y"}, 0))
Hotstring(":*?B0COX:z", Func("TypeAlphanumeral").Bind({"superscript":"ᶻ","italics":"𝑧","bold":"𝘇","doubleStruck":"𝕫","script":"𝓏","monospace":"𝚣","fraktur":"𝔷","sansSerif":"𝗓","roman":"z"}, 0))
Hotstring(":*?B0COX:A", Func("TypeAlphanumeral").Bind({"superscript":"ᴬ","italics":"𝐴","bold":"𝗔","doubleStruck":"𝔸","script":"𝒜","monospace":"𝙰","fraktur":"𝔄","sansSerif":"𝖠","roman":"A"}, 0))
Hotstring(":*?B0COX:B", Func("TypeAlphanumeral").Bind({"superscript":"ᴮ","italics":"𝐵","bold":"𝗕","doubleStruck":"𝔹","script":"ℬ","monospace":"𝙱","fraktur":"𝔅","sansSerif":"𝖡","roman":"B"}, 0))
Hotstring(":*?B0COX:C", Func("TypeAlphanumeral").Bind({"italics":"𝐶","bold":"𝗖","doubleStruck":"ℂ","script":"𝒞","monospace":"𝙲","fraktur":"ℭ","sansSerif":"𝖢","roman":"C"}, 0))
Hotstring(":*?B0COX:D", Func("TypeAlphanumeral").Bind({"superscript":"ᴰ","italics":"𝐷","bold":"𝗗","doubleStruck":"𝔻","script":"𝒟","monospace":"𝙳","fraktur":"𝔇","sansSerif":"𝖣","roman":"D"}, 0))
Hotstring(":*?B0COX:E", Func("TypeAlphanumeral").Bind({"superscript":"ᴱ","italics":"𝐸","bold":"𝗘","doubleStruck":"𝔼","script":"ℰ","monospace":"𝙴","fraktur":"𝔈","sansSerif":"𝖤","roman":"E"}, 0))
Hotstring(":*?B0COX:F", Func("TypeAlphanumeral").Bind({"italics":"𝐹","bold":"𝗙","doubleStruck":"𝔽","script":"ℱ","monospace":"𝙵","fraktur":"𝔉","sansSerif":"𝖥","roman":"F"}, 0))
Hotstring(":*?B0COX:G", Func("TypeAlphanumeral").Bind({"superscript":"ᴳ","italics":"𝐺","bold":"𝗚","doubleStruck":"𝔾","script":"𝒢","monospace":"𝙶","fraktur":"𝔊","sansSerif":"𝖦","roman":"G"}, 0))
Hotstring(":*?B0COX:H", Func("TypeAlphanumeral").Bind({"superscript":"ᴴ","italics":"𝐻","bold":"𝗛","doubleStruck":"ℍ","script":"ℋ","monospace":"𝙷","fraktur":"ℌ","sansSerif":"𝖧","roman":"H"}, 0))
Hotstring(":*?B0COX:I", Func("TypeAlphanumeral").Bind({"superscript":"ᴵ","italics":"𝐼","bold":"𝗜","doubleStruck":"𝕀","script":"ℐ","monospace":"𝙸","fraktur":"ℑ","sansSerif":"𝖨","roman":"I"}, 0))
Hotstring(":*?B0COX:J", Func("TypeAlphanumeral").Bind({"superscript":"ᴶ","italics":"𝐽","bold":"𝗝","doubleStruck":"𝕁","script":"𝒥","monospace":"𝙹","fraktur":"𝔍","sansSerif":"𝖩","roman":"J"}, 0))
Hotstring(":*?B0COX:K", Func("TypeAlphanumeral").Bind({"superscript":"ᴷ","italics":"𝐾","bold":"𝗞","doubleStruck":"𝕂","script":"𝒦","monospace":"𝙺","fraktur":"𝔎","sansSerif":"𝖪","roman":"K"}, 0))
Hotstring(":*?B0COX:L", Func("TypeAlphanumeral").Bind({"superscript":"ᴸ","italics":"𝐿","bold":"𝗟","doubleStruck":"𝕃","script":"ℒ","monospace":"𝙻","fraktur":"𝔏","sansSerif":"𝖫","roman":"L"}, 0))
Hotstring(":*?B0COX:M", Func("TypeAlphanumeral").Bind({"superscript":"ᴹ","italics":"𝑀","bold":"𝗠","doubleStruck":"𝕄","script":"ℳ","monospace":"𝙼","fraktur":"𝔐","sansSerif":"𝖬","roman":"M"}, 0))
Hotstring(":*?B0COX:N", Func("TypeAlphanumeral").Bind({"superscript":"ᴺ","italics":"𝑁","bold":"𝗡","doubleStruck":"ℕ","script":"𝒩","monospace":"𝙽","fraktur":"𝔑","sansSerif":"𝖭","roman":"N"}, 0))
Hotstring(":*?B0COX:O", Func("TypeAlphanumeral").Bind({"superscript":"ᴼ","italics":"𝑂","bold":"𝗢","doubleStruck":"𝕆","script":"𝒪","monospace":"𝙾","fraktur":"𝔒","sansSerif":"𝖮","roman":"O"}, 0))
Hotstring(":*?B0COX:P", Func("TypeAlphanumeral").Bind({"superscript":"ᴾ","italics":"𝑃","bold":"𝗣","doubleStruck":"ℙ","script":"𝒫","monospace":"𝙿","fraktur":"𝔓","sansSerif":"𝖯","roman":"P"}, 0))
Hotstring(":*?B0COX:Q", Func("TypeAlphanumeral").Bind({"italics":"𝑄","bold":"𝗤","doubleStruck":"ℚ","script":"𝒬","monospace":"𝚀","fraktur":"𝔔","sansSerif":"𝖰","roman":"Q"}, 0))
Hotstring(":*?B0COX:R", Func("TypeAlphanumeral").Bind({"superscript":"ᴿ","italics":"𝑅","bold":"𝗥","doubleStruck":"ℝ","script":"ℛ","monospace":"𝚁","fraktur":"ℜ","sansSerif":"𝖱","roman":"R"}, 0))
Hotstring(":*?B0COX:S", Func("TypeAlphanumeral").Bind({"italics":"𝑆","bold":"𝗦","doubleStruck":"𝕊","script":"𝒮","monospace":"𝚂","fraktur":"𝔖","sansSerif":"𝖲","roman":"S"}, 0))
Hotstring(":*?B0COX:T", Func("TypeAlphanumeral").Bind({"superscript":"ᵀ","italics":"𝑇","bold":"𝗧","doubleStruck":"𝕋","script":"𝒯","monospace":"𝚃","fraktur":"𝔗","sansSerif":"𝖳","roman":"T"}, 0))
Hotstring(":*?B0COX:U", Func("TypeAlphanumeral").Bind({"superscript":"ᵁ","italics":"𝑈","bold":"𝗨","doubleStruck":"𝕌","script":"𝒰","monospace":"𝚄","fraktur":"𝔘","sansSerif":"𝖴","roman":"U"}, 0))
Hotstring(":*?B0COX:V", Func("TypeAlphanumeral").Bind({"superscript":"ⱽ","italics":"𝑉","bold":"𝗩","doubleStruck":"𝕍","script":"𝒱","monospace":"𝚅","fraktur":"𝔙","sansSerif":"𝖵","roman":"V"}, 0))
Hotstring(":*?B0COX:W", Func("TypeAlphanumeral").Bind({"superscript":"ᵂ","italics":"𝑊","bold":"𝗪","doubleStruck":"𝕎","script":"𝒲","monospace":"𝚆","fraktur":"𝔚","sansSerif":"𝖶","roman":"W"}, 0))
Hotstring(":*?B0COX:X", Func("TypeAlphanumeral").Bind({"italics":"𝑋","bold":"𝗫","doubleStruck":"𝕏","script":"𝒳","monospace":"𝚇","fraktur":"𝔛","sansSerif":"𝖷","roman":"X"}, 0))
Hotstring(":*?B0COX:Y", Func("TypeAlphanumeral").Bind({"italics":"𝑌","bold":"𝗬","doubleStruck":"𝕐","script":"𝒴","monospace":"𝚈","fraktur":"𝔜","sansSerif":"𝖸","roman":"Y"}, 0))
Hotstring(":*?B0COX:Z", Func("TypeAlphanumeral").Bind({"italics":"𝑍","bold":"𝗭","doubleStruck":"ℤ","script":"𝒵","monospace":"𝚉","fraktur":"ℨ","sansSerif":"𝖹","roman":"Z"}, 0))
Hotstring(":?COXZ:^", Func("ChangeElevation").Bind("superscript"))
Hotstring(":?COXZ:_", Func("ChangeElevation").Bind("subscript"))
Hotstring(":?COXZ:|", Func("ChangeElevation").Bind("standard"))

^#!m::Suspend

~BS::
~Del::
~Home::
~End::
~PgUp::
~PgDn::
~Left::
~Right::
~LButton::
~RButton::
Hotstring("Reset")
Return
